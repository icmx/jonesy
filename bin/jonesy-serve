#!/usr/bin/env python3

from http.server import BaseHTTPRequestHandler, HTTPServer
import datetime
import subprocess
import os


JONESY_HOME      = os.environ.get(
    "JONESY_HOME", os.environ.get("HOME") + "/.jonesy"
)

JONESY_HOST      = os.environ.get("JONESY_HOST", "127.0.0.1")
JONESY_PORT      = os.environ.get("JONESY_PORT", "8600")

JONESY_FETCHFEED = """<?xml version="1.0" encoding="utf-8"?>
    <feed xmlns="http://www.w3.org/2005/Atom">
    <title>Jonesy Bumper Feed</title>
    <subtitle>
        This feed is a backup update trigger — if you access it, then
        jonesy-serve will execute jonesy-fetch and update all your
        feeds. It's better to use external schedulers however ­— such as
        at, Cron or systemd service.
    </subtitle>
    <updated>{isodate}</updated>
    <entry>
        <title>Update started at {isodate}</title>
        <updated>{isodate}</updated>
        <content type="html">
            &lt;p&gt;
                If you can read this, then your local feeds are already
                updated by jonesy-fetch at {isodate}.
            &lt;/p&gt;
            &lt;p&gt;
                jonesy-fetch output:;
            &lt;/p&gt;
            &lt;pre style=&#39;white-space:pre-wrap;&#39;&gt;{output}
            &lt;/pre&gt;
        </content>
    </entry>
</feed>"""

class CustomHandler(BaseHTTPRequestHandler):

    def send_headers_ok(self):
        self.send_response(200)
        self.send_header("Content-Type", "application/xml")
        self.end_headers()

    def send_headers_fail(self):
        self.send_response(400)
        self.end_headers()

    def do_GET(self):

        print("\tAccessing to path {0}".format(self.path))

        if (self.path == "/jonesyfetch"):

            output   = subprocess.getoutput("./jonesy-fetch")
            isodate  = datetime.datetime.utcnow().replace(
                tzinfo=datetime.timezone.utc).isoformat()
            response = JONESY_FETCHFEED.format(
                isodate=isodate, output=output)

            self.send_headers_ok()
            self.wfile.write(bytes(response, "utf-8"))
        else:
            try:
                file = open(os.path.realpath(JONESY_HOME + self.path), "rb")
                data = file.read()
                file.close()
            except:
                self.send_headers_fail(400)
            else:
                self.send_headers_ok()
                self.wfile.write(data)


def run(host, port, server_class=HTTPServer, handler_class=CustomHandler):
    server_address = (host, port)
    httpd = server_class(server_address, handler_class)
    print("Starting Jonesy...")
    print("Press Ctrl + C to cancel.")
    httpd.serve_forever()


if __name__ == "__main__":
    run(host=JONESY_HOST, port=int(JONESY_PORT))
